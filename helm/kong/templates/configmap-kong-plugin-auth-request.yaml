apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-plugin-auth-request
  namespace: kong
data:
  access.lua: "local http = require \"resty.http\"\r\n-- local cjson = require \"cjson.safe\"\r\n\r\nlocal
    ngx = ngx\r\nlocal ngx_var = ngx.var\r\n\r\nlocal _M = {}\r\n\r\nfunction _M.execute(conf)\r\n
    \   local ok, err\r\n    local scheme, host, port, _ = unpack(http:parse_uri(conf.auth_uri))\r\n\r\n
    \   local client = http.new()\r\n    client:set_timeout(conf.timeout)\r\n    client:connect(host,
    port)\r\n    if scheme == \"https\" then\r\n        local ok, err = client:ssl_handshake()\r\n
    \       if not ok then\r\n            kong.log.err(err)\r\n            return
    kong.response.exit(500, { message = \"An unexpected error occurred\" })\r\n        end\r\n
    \   end\r\n\r\n    local auth_request = _M.new_auth_request(conf.origin_request_headers_to_forward_to_auth,
    conf.keepalive_timeout)\r\n\r\n    local res, err = client:request_uri(conf.auth_uri,
    auth_request)\r\n\r\n    if not res then\r\n        kong.log.err(err)\r\n        return
    kong.response.exit(500, { message = \"An unexpected error occurred\" })\r\n    end\r\n\r\n
    \   if res.status > 299 then\r\n        return kong.response.exit(res.status,
    res.body)\r\n    end\r\n\r\n    for _, name in ipairs(conf.auth_response_headers_to_forward)
    do\r\n        if res.headers[name] then\r\n            kong.service.request.set_header(name,
    res.headers[name])\r\n        end\r\n    end\r\nend\r\n\r\nfunction _M.new_auth_request(origin_request_headers_to_forward_to_auth,
    keepalive_timeout)\r\n    -- may have been changed by the request transformer
    plugin\r\n    local upstream_uri = ngx_var.upstream_uri or kong.request.get_path()\r\n\r\n
    \   local headers = {\r\n        charset = \"utf-8\",\r\n        [\"content-type\"]
    = \"application/json\",\r\n        [\"x-original-method\"] = kong.request.get_method(),\r\n
    \       [\"x-raw-original-url\"] = kong.request.get_path(),\r\n        [\"x-original-url\"]
    = upstream_uri\r\n    }\r\n    for _, name in ipairs(origin_request_headers_to_forward_to_auth)
    do\r\n        local header_val = kong.request.get_header(name)\r\n        if header_val
    then\r\n            headers[name] = header_val\r\n        end\r\n    end\r\n    return
    {\r\n        method = \"GET\",\r\n        headers = headers,\r\n        body =
    \"\",\r\n        keepalive_timeout = keepalive_timeout\r\n    }\r\nend\r\n\r\nreturn
    _M\r\n"
  handler.lua: "-- local BasePlugin = require \"kong.plugins.base_plugin\"\r\nlocal
    access = require \"kong.plugins.kong-auth-request.access\"\r\n\r\nlocal AuthRequestHandler
    = {\r\n  VERSION  = \"1.0.0\",\r\n  PRIORITY = 900,\r\n}\r\n\r\nfunction AuthRequestHandler:init_worker()\r\n
    \ kong.log.notice(\"kong-auth-request init\")\r\nend\r\n\r\n-- local AuthRequestHandler
    = BasePlugin:extend()\r\n\r\n-- AuthRequestHandler.PRIORITY = 900\r\n\r\n-- function
    AuthRequestHandler:new()\r\n--   AuthRequestHandler.super.new(self, \"kong-auth-request\")\r\n--
    end\r\n\r\nfunction AuthRequestHandler:access(conf)\r\n  kong.log.notice(\"kong-auth-request
    access\")\r\n  -- AuthRequestHandler.super.access(self)\r\n  access.execute(conf)\r\nend\r\n\r\nreturn
    AuthRequestHandler"
  schema.lua: "local typedefs = require \"kong.db.schema.typedefs\"\r\n\r\nreturn
    {\r\n  name = \"kong-auth-request\",\r\n  fields = {\r\n    {\r\n      -- this
    plugin will only be applied to Services or Routes\r\n      consumer = typedefs.no_consumer\r\n
    \   },\r\n    {\r\n      -- this plugin will only run within Nginx HTTP module\r\n
    \     protocols = typedefs.protocols_http\r\n    },\r\n    {\r\n      config =
    {\r\n        type = \"record\",\r\n        fields = {\r\n            {timeout
    = { default = 10000, type = \"number\" }},\r\n            {keepalive_timeout =
    { default = 60000, type = \"number\" }},\r\n            {auth_uri = { required
    = true, type = \"string\" }},\r\n            {origin_request_headers_to_forward_to_auth
    = { type = \"array\", elements = {type = \"string\"}, default = {} }},\r\n            {auth_response_headers_to_forward
    = { type = \"array\", elements = {type = \"string\"}, default = {} }}\r\n        \r\n
    \       },\r\n      },\r\n    },\r\n  },\r\n  entity_checks = {\r\n    -- Describe
    your plugin's entity validation rules\r\n  },\r\n}\r\n"
